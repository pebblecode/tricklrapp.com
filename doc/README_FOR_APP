# Tricklr

Tricklr is a simple to use web app for marketing teams and high volume tweeters. Tricklr helps you effectively manage your Twitter feed by trickling out tweets at regular intervals.

## Running the site

For initial installation (should only need to be done once)

    gem install bundle
    bundle install

    # Set up the database
    # Copy config/database.yml.example to config/database.yml, and change the relevant values
    bundle exec rake db:create
    bundle exec rake db:migrate


Run the site

    # If the Gemfile has changed, you will need to run 'bundle install' first
    bundle exec rails s


To start the resque workers

    bundle exec foreman start

To precompile assets

    bundle exec rake assets:precompile

### Sending tweets

To send tweets manually

1. Create a tweet through the interface
2. Find the status id in the database
3. In the rails console (`rails c`), run the command: `SendTweet.perform(id)` where id is the status id

### Running the site on Virtual Box

Add this to the hosts file (C:\WINDOWS\system32\drivers\etc):

    10.0.2.2        tricklr.local

To access the site, go to:

    http://tricklr.local:3000/

**Note: you need the http://, and 3000 should be the port number the server is run on

## Testing

For testing, the following is used:

* [Rspec](http://rspec.info/)
* [Capybara](https://github.com/jnicklas/capybara) - acceptance testing with html interaction
* [Spork](https://github.com/timcharper/spork) - preloads rails env to run tests faster
* [Guard](https://github.com/guard/guard) - automatically runs tests

See [railscast spork](http://railscasts.com/episodes/285-spork) on how to initially set it up spork and guard.
**Note: All the necessary files should already be set up in the git repo.**

To set up the test environment:

    rake db:create RAILS_ENV=test
    rake db:migrate RAILS_ENV=test

To automate tests running in the background:

    bundle exec guard

To focus guard tests to just run a particular test, use the :focus tag in specs eg,

    it 'renders the index template', :focus do
      response.should render_template("index")
    end

To run tests manually:

    # Run the spork server:
    bundle exec spork

    # In another terminal, run the tests
    bundle exec rspec . --drb
    bundle exec rspec ./spec/controllers/statuses_controller_spec.rb --drb     # to run individual tests

### Javascript tests

Javascript tests use the [mocha](http://visionmedia.github.com/mocha/) framework and the [mocha_rails](https://github.com/quartzmo/mocha_rails) gem.

To view javascript tests, go to `http://tricklr.local:3000/mocha`.

Tests are stored in `/spec/javascripts/*`.

## Staging

To edit the start/stop script:

    nano /etc/init.d/tricklr

Usage:

    /etc/init.d/tricklr <start|stop|restart|upgrade|force-stop|reopen-logs>

## Deployment

### Staging

Merge master to staging and ship it to staging server:

    bundle exec rake shipit[staging]

#### Monit

Monit script to start the processes on the server is in: `/etc/monit/conf.d/tricklrapp.pebblecode.net.monitrc`. Also copied in this project at `/config/deploy/monit/tricklr.pebblecode.net.monitrc`.

The monit script starts the scripts in `/home/webapps/bin/tricklr` on the server. Also copied in this project repository at `/config/deploy/monit/scripts`.

#### Resque

To check on the resque workers go to: `http://tricklrapp.pebblecode.net/resque` (user/pass in `/config/initializers/resque.rb`).

### Production

1. Merge `master` branch into `production`
2. `bundle exec cap production deploy`

[TODO] Fix up rake task

To manually start up the monit workers, run the following on production (as tricklr user):

    cd /srv/tricklrapp.com/current; RAILS_ENV=production bundle exec nohup rake environment resque:scheduler& > log/resque_scheduler.log && echo $! > tmp/pids/resque_scheduler.pid
    cd /srv/tricklrapp.com/current;  RAILS_ENV=production QUEUE=* VERBOSE=1 bundle exec nohup rake environment resque:work& > log/resque_worker.log && echo $! > tmp/pids/resque_worker.pid

To troubleshoot in rails console in production, run

    cd /srv/tricklrapp.com/current
    RAILS_ENV=production bundle exec rails c


#### Resque

To check on the resque workers go to: `http://tricklrapp.com/resque` (user/pass in `/config/initializers/resque.rb`).

#### Connecting to the database

Add the following to `~/.ssh/config`

    Host starling.tricklrapp.com
    user tricklr
    Port 7234

Create a local ssh tunnel to port `63333`

    ssh -L 63333:localhost:5432 starling.tricklrapp.com

Connect using a postgres app with

* host: localhost
* port: 63333
* user: tricklr
* password is in mortimer